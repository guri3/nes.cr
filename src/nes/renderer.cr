require "stumpy_png"
require "./types"
require "crsfml"

include StumpyPNG

COLORS = [
  [0x80, 0x80, 0x80], [0x00, 0x3d, 0xa6], [0x00, 0x12, 0xb0], [0x44, 0x00, 0x96],
  [0xa1, 0x00, 0x5e], [0xc7, 0x00, 0x28], [0xba, 0x06, 0x00], [0x8c, 0x17, 0x00],
  [0x5c, 0x2f, 0x00], [0x10, 0x45, 0x00], [0x05, 0x4a, 0x00], [0x00, 0x47, 0x2e],
  [0x00, 0x41, 0x66], [0x00, 0x00, 0x00], [0x05, 0x05, 0x05], [0x05, 0x05, 0x05],
  [0xc7, 0xc7, 0xc7], [0x00, 0x77, 0xff], [0x21, 0x55, 0xff], [0x82, 0x37, 0xfa],
  [0xeb, 0x2f, 0xb5], [0xff, 0x29, 0x50], [0xff, 0x22, 0x00], [0xd6, 0x32, 0x00],
  [0xc4, 0x62, 0x00], [0x35, 0x80, 0x00], [0x05, 0x8f, 0x00], [0x00, 0x8a, 0x55],
  [0x00, 0x99, 0xcc], [0x21, 0x21, 0x21], [0x09, 0x09, 0x09], [0x09, 0x09, 0x09],
  [0xff, 0xff, 0xff], [0x0f, 0xd7, 0xff], [0x69, 0xa2, 0xff], [0xd4, 0x80, 0xff],
  [0xff, 0x45, 0xf3], [0xff, 0x61, 0x8b], [0xff, 0x88, 0x33], [0xff, 0x9c, 0x12],
  [0xfa, 0xbc, 0x20], [0x9f, 0xe3, 0x0e], [0x2b, 0xf0, 0x35], [0x0c, 0xf0, 0xa4],
  [0x05, 0xfb, 0xff], [0x5e, 0x5e, 0x5e], [0x0d, 0x0d, 0x0d], [0x0d, 0x0d, 0x0d],
  [0xff, 0xff, 0xff], [0xa6, 0xfc, 0xff], [0xb3, 0xec, 0xff], [0xda, 0xab, 0xeb],
  [0xff, 0xa8, 0xf9], [0xff, 0xab, 0xb3], [0xff, 0xd2, 0xb0], [0xff, 0xef, 0xa6],
  [0xff, 0xf7, 0x9c], [0xd7, 0xe8, 0x95], [0xa6, 0xed, 0xaf], [0xa2, 0xf2, 0xda],
  [0x99, 0xff, 0xfc], [0xdd, 0xdd, 0xdd], [0x11, 0x11, 0x11], [0x11, 0x11, 0x11],
]

class Renderer
  @image_data : Array(Byte)

  def initialize
    @image_data = Array.new(256 * 240 * 3, 0_u8)
  end

  def render(data : RenderingData) : Array(SF::Vertex)
    self.render_background(data.background, data.palette)
    self.get_points
  end

  def render_background(background : Array(Tile) | Nil, palette : PaletteRam)
    (0...background.as(Array(Tile)).size).each do |i|
      x = (i % 32).to_u16 * 8
      y = ~~(i / 32).to_u16 * 8
      self.render_tile(background.as(Array(Tile))[i], x, y, palette)
    end
  end

  def render_tile(tile : Tile, tile_x : UInt16, tile_y : UInt16, palette : PaletteRam)
    sprite = tile.sprite
    palette_id = tile.palette_id
    (0...8).each do |i|
      (0...8).each do |j|
        palette_index = palette_id * 4 + sprite[i][j]
        color_id = palette[palette_index]
        color = COLORS[color_id]
        x = tile_x + j
        y = tile_y + i
        if x >= 0 && 0xFF >= x && y >= 0 && y < 240
          index = (x.to_u32 + (y * 0x0100)) * 3
          @image_data[index] = color[0].to_u8
          @image_data[index + 1] = color[1].to_u8
          @image_data[index + 2] = color[2].to_u8
        end
      end
    end
  end

  def render_image(data : Array(Byte))
    canvas = Canvas.new(256, 240)
    (0...240).each do |y|
      (0...256).each do |x|
        index = (x + (y * 0x0100)) * 3
        color = RGBA.from_rgb_n(data[index], data[index + 1], data[index + 2], 8)
        canvas[x, y] = color
      end
    end

    StumpyPNG.write(canvas, "output.png")
  end

  def get_points : Array(SF::Vertex)
    points = [] of SF::Vertex
    (0...240).each do |y|
      (0...256).each do |x|
        index = (x + (y * 0x0100)) * 3
        color = SF::Color.new(@image_data[index], @image_data[index + 1], @image_data[index + 2])
        points << SF::Vertex.new(SF.vector2f(x, y), color)
      end
    end
    points
  end
end
